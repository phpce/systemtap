set test "ternary_op"
set testpath "$srcdir/$subdir"

if {! [installtest_p]} { untested "$test"; return }

# --- TEST 1 ---

set subtest1 "TEST 1: ternary operator should be tighter than ,"
foreach runtime [get_runtime_list] {
    if {$runtime eq ""} {
        set runtime "kernel"
    }
    set test_name "$test: $subtest1 ($runtime)"

    set cmd "stap --runtime=$runtime '$srcdir/$subdir/${test}_1.stp'"
    send_log "executing: $cmd\n"
    set pipe [open "| sh -c {$cmd}" r]
    set out [read $pipe]
    set failed 0
    if {[catch {close $pipe} stderr] != 0} {
        if {$stderr ne "" && [string index $stderr end] ne "\n"} {
            append stderr "\n"
        }
        global errorCode
        if {"CHILDSTATUS" == [lindex $errorCode 0]} {
            set failed [lindex $errorCode 2]
        }
    }

    set exp_out "positive 3\n"
    regsub -all -- {\n} $exp_out {\n} escaped_exp_out
    if {$out eq $exp_out} {
        pass "${test_name}: stdout matches \"$escaped_exp_out\""
    } else {
        fail "${test_name}: stdout fails to match \"$escaped_exp_out\": got \"$out\""
    }

    if {$failed} {
        fail "${test_name}: exit code should be zero but is $failed"
    } else {
        pass "${test_name}: exit code is zero"
    }
    if {$stderr ne ""} {
        send_log "stderr:\n$stderr"
    }
}

# --- TEST 2 ---

set subtest2 "TEST 2: ternary operator should be tighter than = (bad case)"
set test_name "$test: $subtest2"

set cmd "stap '$srcdir/$subdir/${test}_2.stp'"
send_log "executing: $cmd\n"
set pipe [open "| sh -c {$cmd}" r]
set out [read $pipe]
set failed 0
if {[catch {close $pipe} stderr] != 0} {
    if {$stderr ne "" && [string index $stderr end] ne "\n"} {
        append stderr "\n"
    }
    global errorCode
    if {"CHILDSTATUS" == [lindex $errorCode 0]} {
        set failed [lindex $errorCode 2]
    }
}

set exp_out ""
regsub -all -- {\n} $exp_out {\n} escaped_exp_out
if {$out eq $exp_out} {
    pass "${test_name}: stdout matches \"$escaped_exp_out\""
} else {
    fail "${test_name}: stdout fails to match \"$escaped_exp_out\": got \"$out\""
}

if {$failed} {
    pass "${test_name}: exit code should be non-zero"
} else {
    fail "${test_name}: exit code should be non-zero but is zero"
}

set stderr_pat "^semantic error: Expecting lvalue for assignment: operator '=' at \[^\\n\]*?\\.stp:4:58\\n        source:     printf\\(\"a = %d, b = %d, c = %d\\\\n\", a > 0 \\? b = 4 : c = 5, b, c\\);\\n                                                                         \\^\\n"
regsub -all -- {\n} $stderr_pat {\n} escaped_stderr_pat
if {[regexp -linestop -lineanchor -- $stderr_pat $stderr]} {
    pass "${test_name}: stderr matches \"$escaped_stderr_pat\""
} else {
    fail "${test_name}: stderr fails to match \"$escaped_stderr_pat\": got \"$stderr\""
}

# --- TEST 3 ---

set subtest3 "TEST 3: ternary operator should be tighter than = (bad case, compatible 4.0)"
set test_name "$test: $subtest3"

set cmd "stap --compatible 4.0 '$srcdir/$subdir/${test}_2.stp'"
send_log "executing: $cmd\n"
set pipe [open "| sh -c {$cmd}" r]
set out [read $pipe]
set failed 0
if {[catch {close $pipe} stderr] != 0} {
    if {$stderr ne "" && [string index $stderr end] ne "\n"} {
        append stderr "\n"
    }
    global errorCode
    if {"CHILDSTATUS" == [lindex $errorCode 0]} {
        set failed [lindex $errorCode 2]
    }
}

set exp_out ""
regsub -all -- {\n} $exp_out {\n} escaped_exp_out
if {$out eq $exp_out} {
    pass "${test_name}: stdout matches \"$escaped_exp_out\""
} else {
    fail "${test_name}: stdout fails to match \"$escaped_exp_out\": got \"$out\""
}

if {$failed} {
    pass "${test_name}: exit code should be non-zero"
} else {
    fail "${test_name}: exit code should be non-zero but is zero"
}

set stderr_pat "^semantic error: Expecting lvalue for assignment: operator '=' at \[^\\n\]*?\\.stp:4:58\\n        source:     printf\\(\"a = %d, b = %d, c = %d\\\\n\", a > 0 \\? b = 4 : c = 5, b, c\\);\\n                                                                         \\^\\n"
regsub -all -- {\n} $stderr_pat {\n} escaped_stderr_pat
if {[regexp -linestop -lineanchor -- $stderr_pat $stderr]} {
    pass "${test_name}: stderr matches \"$escaped_stderr_pat\""
} else {
    fail "${test_name}: stderr fails to match \"$escaped_stderr_pat\": got \"$stderr\""
}

# --- TEST 4 ---

set subtest4 "TEST 4: ternary operator should be tighter than = (bad case, compatible 3.3)"
foreach runtime [get_runtime_list] {
    if {$runtime eq ""} {
        set runtime "kernel"
    }
    set test_name "$test: $subtest4 ($runtime)"

    set cmd "stap --compatible 3.3 --runtime=$runtime '$srcdir/$subdir/${test}_2.stp'"
    send_log "executing: $cmd\n"
    set pipe [open "| sh -c {$cmd}" r]
    set out [read $pipe]
    set failed 0
    if {[catch {close $pipe} stderr] != 0} {
        if {$stderr ne "" && [string index $stderr end] ne "\n"} {
            append stderr "\n"
        }
        global errorCode
        if {"CHILDSTATUS" == [lindex $errorCode 0]} {
            set failed [lindex $errorCode 2]
        }
    }

    set exp_out "a = 4, b = 4, c = 0\n"
    regsub -all -- {\n} $exp_out {\n} escaped_exp_out
    if {$out eq $exp_out} {
        pass "${test_name}: stdout matches \"$escaped_exp_out\""
    } else {
        fail "${test_name}: stdout fails to match \"$escaped_exp_out\": got \"$out\""
    }

    if {$failed} {
        fail "${test_name}: exit code should be zero but is $failed"
    } else {
        pass "${test_name}: exit code is zero"
    }
    if {$stderr ne ""} {
        send_log "stderr:\n$stderr"
    }
}

# --- TEST 5 ---

set subtest5 "TEST 5: ternary operator should be tighter than = (bad case, compatible 3.2)"
foreach runtime [get_runtime_list] {
    if {$runtime eq ""} {
        set runtime "kernel"
    }
    set test_name "$test: $subtest5 ($runtime)"

    set cmd "stap --compatible 3.2 --runtime=$runtime '$srcdir/$subdir/${test}_2.stp'"
    send_log "executing: $cmd\n"
    set pipe [open "| sh -c {$cmd}" r]
    set out [read $pipe]
    set failed 0
    if {[catch {close $pipe} stderr] != 0} {
        if {$stderr ne "" && [string index $stderr end] ne "\n"} {
            append stderr "\n"
        }
        global errorCode
        if {"CHILDSTATUS" == [lindex $errorCode 0]} {
            set failed [lindex $errorCode 2]
        }
    }

    set exp_out "a = 4, b = 4, c = 0\n"
    regsub -all -- {\n} $exp_out {\n} escaped_exp_out
    if {$out eq $exp_out} {
        pass "${test_name}: stdout matches \"$escaped_exp_out\""
    } else {
        fail "${test_name}: stdout fails to match \"$escaped_exp_out\": got \"$out\""
    }

    if {$failed} {
        fail "${test_name}: exit code should be zero but is $failed"
    } else {
        pass "${test_name}: exit code is zero"
    }
    if {$stderr ne ""} {
        send_log "stderr:\n$stderr"
    }
}

# --- TEST 6 ---

set subtest6 "TEST 6: ternary operator should be tighter than = (good case, with parens)"
foreach runtime [get_runtime_list] {
    if {$runtime eq ""} {
        set runtime "kernel"
    }
    set test_name "$test: $subtest6 ($runtime)"

    set cmd "stap --runtime=$runtime '$srcdir/$subdir/${test}_6.stp'"
    send_log "executing: $cmd\n"
    set pipe [open "| sh -c {$cmd}" r]
    set out [read $pipe]
    set failed 0
    if {[catch {close $pipe} stderr] != 0} {
        if {$stderr ne "" && [string index $stderr end] ne "\n"} {
            append stderr "\n"
        }
        global errorCode
        if {"CHILDSTATUS" == [lindex $errorCode 0]} {
            set failed [lindex $errorCode 2]
        }
    }

    set exp_out "3\n"
    regsub -all -- {\n} $exp_out {\n} escaped_exp_out
    if {$out eq $exp_out} {
        pass "${test_name}: stdout matches \"$escaped_exp_out\""
    } else {
        fail "${test_name}: stdout fails to match \"$escaped_exp_out\": got \"$out\""
    }

    set stderr_pat "^WARNING: Eliding assignment to 'b': operator '=' at \[^\\n\]*?\\.stp:3:30\n.*?\nWARNING: Eliding assignment to 'c': operator '=' at :3:39\n"
    regsub -all -- {\n} $stderr_pat {\n} escaped_stderr_pat
    if {[regexp -lineanchor -- $stderr_pat $stderr]} {
        pass "${test_name}: stderr matches \"$escaped_stderr_pat\""
    } else {
        fail "${test_name}: stderr fails to match \"$escaped_stderr_pat\": got \"$stderr\""
    }

    if {$failed} {
        fail "${test_name}: exit code should be zero but is $failed"
    } else {
        pass "${test_name}: exit code is zero"
    }
}

# --- TEST 7 ---

set subtest7 "TEST 7: nested ternary operators"
foreach runtime [get_runtime_list] {
    if {$runtime eq ""} {
        set runtime "kernel"
    }
    set test_name "$test: $subtest7 ($runtime)"

    set cmd "stap --runtime=$runtime '$srcdir/$subdir/${test}_7.stp'"
    send_log "executing: $cmd\n"
    set pipe [open "| sh -c {$cmd}" r]
    set out [read $pipe]
    set failed 0
    if {[catch {close $pipe} stderr] != 0} {
        if {$stderr ne "" && [string index $stderr end] ne "\n"} {
            append stderr "\n"
        }
        global errorCode
        if {"CHILDSTATUS" == [lindex $errorCode 0]} {
            set failed [lindex $errorCode 2]
        }
    }

    set exp_out "3\n4\n6\n5\n"
    regsub -all -- {\n} $exp_out {\n} escaped_exp_out
    if {$out eq $exp_out} {
        pass "${test_name}: stdout matches \"$escaped_exp_out\""
    } else {
        fail "${test_name}: stdout fails to match \"$escaped_exp_out\": got \"$out\""
    }

    if {$failed} {
        fail "${test_name}: exit code should be zero but is $failed"
    } else {
        pass "${test_name}: exit code is zero"
    }
    if {$stderr ne ""} {
        send_log "stderr:\n$stderr"
    }
}
